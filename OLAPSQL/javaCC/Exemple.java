/* Generated By:JavaCC: Do not edit this line. Exemple.java */
package javaCC;
        public class Exemple implements ExempleConstants {

/*----------------------------------
-	MAIN
-----------------------------------*/
  static final public void execute() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      create();
      break;
    case DROP:
      drop();
      break;
    case ALTER:
      alter();
      break;
    case INSERT:
      insert();
      break;
    case DELETE:
      delete();
      break;
    case SELECT:
      select();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*----------------------------------
-	COMMANDES
-----------------------------------*/
        /*-------------
	-	CREATE
	---------------*/
  static final public void create() throws ParseException {
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACT:
      create_fact();
      break;
    case DIMENSION:
      create_dim();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void create_fact() throws ParseException {
    jj_consume_token(FACT);
    jj_consume_token(NOM);
    jj_consume_token(OUVRANTE);
    def_attr();
    jj_consume_token(FERMANTE);
    jj_consume_token(CONNECT);
    jj_consume_token(TO);
    jj_consume_token(NOM);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(VIRG);
      jj_consume_token(NOM);
    }
    jj_consume_token(PTVIRG);
  }

  static final public void create_dim() throws ParseException {
    jj_consume_token(DIMENSION);
    jj_consume_token(NOM);
    jj_consume_token(OUVRANTE);
    def_attr();
    jj_consume_token(FERMANTE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITH:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(WITH);
      jj_consume_token(HIERARCHY);
      jj_consume_token(OUVRANTE);
      def_lev();
      jj_consume_token(FERMANTE);
    }
    jj_consume_token(PTVIRG);
  }

        /*-------------
	-	DROP
	---------------*/
  static final public void drop() throws ParseException {
    jj_consume_token(DROP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACT:
      drop_fact();
      break;
    case DIMENSION:
      drop_dim();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void drop_fact() throws ParseException {
    jj_consume_token(FACT);
    jj_consume_token(NOM);
    jj_consume_token(PTVIRG);
  }

  static final public void drop_dim() throws ParseException {
    jj_consume_token(DIMENSION);
    jj_consume_token(NOM);
    jj_consume_token(PTVIRG);
  }

        /*-------------
	-	ALTER
	---------------*/
  static final public void alter() throws ParseException {
    jj_consume_token(ALTER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACT:
      alter_fact();
      break;
    case DIMENSION:
      alter_dim();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void alter_fact() throws ParseException {
    jj_consume_token(FACT);
    jj_consume_token(NOM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DROP:
    case ADD:
    case CONNECT:
    case DISCONNECT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
        def_attr();
        break;
      case DROP:
        jj_consume_token(DROP);
        jj_consume_token(NOM);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRG:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_3;
          }
          jj_consume_token(VIRG);
          jj_consume_token(NOM);
        }
        break;
      case CONNECT:
        jj_consume_token(CONNECT);
        jj_consume_token(TO);
        jj_consume_token(NOM);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRG:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_4;
          }
          jj_consume_token(VIRG);
          jj_consume_token(NOM);
        }
        break;
      case DISCONNECT:
        jj_consume_token(DISCONNECT);
        jj_consume_token(TO);
        jj_consume_token(NOM);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRG:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_5;
          }
          jj_consume_token(VIRG);
          jj_consume_token(NOM);
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(PTVIRG);
  }

  static final public void alter_dim() throws ParseException {
    jj_consume_token(DIMENSION);
    jj_consume_token(NOM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DROP:
    case ADD:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOM:
          def_attr();
          break;
        case HIERARCHY:
          jj_consume_token(HIERARCHY);
          jj_consume_token(NOM);
          jj_consume_token(OUVRANTE);
          def_lev();
          jj_consume_token(FERMANTE);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case DROP:
        jj_consume_token(DROP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOM:
          jj_consume_token(NOM);
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VIRG:
              ;
              break;
            default:
              jj_la1[12] = jj_gen;
              break label_6;
            }
            jj_consume_token(VIRG);
            jj_consume_token(NOM);
          }
          break;
        case HIERARCHY:
          jj_consume_token(HIERARCHY);
          jj_consume_token(NOM);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(PTVIRG);
  }

        /*-------------
	-	insert
	---------------*/
  static final public void insert() throws ParseException {
    jj_consume_token(INSERT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACT:
      insert_fact();
      break;
    case DIMENSION:
      insert_dim();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void insert_fact() throws ParseException {
    jj_consume_token(FACT);
    jj_consume_token(NOM);
    jj_consume_token(VALUES);
    jj_consume_token(OUVRANTE);
    def_une_valeur();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(VIRG);
      def_une_valeur();
    }
    jj_consume_token(FERMANTE);
    jj_consume_token(CONNECT);
    jj_consume_token(TO);
    jj_consume_token(NOM);
    jj_consume_token(WHERE);
    def_pred();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      jj_consume_token(VIRG);
      jj_consume_token(NOM);
      jj_consume_token(WHERE);
      def_pred();
    }
    jj_consume_token(PTVIRG);
  }

  static final public void insert_dim() throws ParseException {
    jj_consume_token(DIMENSION);
    jj_consume_token(NOM);
    jj_consume_token(VALUES);
    jj_consume_token(OUVRANTE);
    def_une_valeur();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      jj_consume_token(VIRG);
      def_une_valeur();
    }
    jj_consume_token(FERMANTE);
    jj_consume_token(PTVIRG);
  }

        /*-------------
	-	DELETE
	---------------*/
  static final public void delete() throws ParseException {
    jj_consume_token(DELETE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACT:
      del_fact();
      break;
    case DIMENSION:
      del_dim();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void del_fact() throws ParseException {
    jj_consume_token(FACT);
    jj_consume_token(NOM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      def_pred();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(PTVIRG);
  }

  static final public void del_dim() throws ParseException {
    jj_consume_token(DIMENSION);
    jj_consume_token(NOM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      def_pred();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(PTVIRG);
  }

        /*-------------
	-	SELECT
	---------------*/
//TODO retour pte qql chose
  static final public void select() throws ParseException {
    jj_consume_token(SELECT);
    def_aggr();
    jj_consume_token(ROW);
    jj_consume_token(NOM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
      jj_consume_token(NOM);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUVRANTE:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_10;
        }
        jj_consume_token(OUVRANTE);
        jj_consume_token(NOM);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PT:
          jj_consume_token(PT);
          jj_consume_token(NOM);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRG:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_11;
          }
          jj_consume_token(VIRG);
          jj_consume_token(NOM);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PT:
            jj_consume_token(PT);
            jj_consume_token(NOM);
            break;
          default:
            jj_la1[26] = jj_gen;
            ;
          }
        }
        jj_consume_token(FERMANTE);
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(COLUMN);
    jj_consume_token(NOM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
      jj_consume_token(NOM);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUVRANTE:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_12;
        }
        jj_consume_token(OUVRANTE);
        jj_consume_token(NOM);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PT:
          jj_consume_token(PT);
          jj_consume_token(NOM);
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRG:
            ;
            break;
          default:
            jj_la1[30] = jj_gen;
            break label_13;
          }
          jj_consume_token(VIRG);
          jj_consume_token(NOM);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PT:
            jj_consume_token(PT);
            jj_consume_token(NOM);
            break;
          default:
            jj_la1[31] = jj_gen;
            ;
          }
        }
        jj_consume_token(FERMANTE);
      }
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(FROM);
    jj_consume_token(NOM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      def_pred();
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(PTVIRG);
  }

/*----------------------------------
-	DEFINITIONS
-----------------------------------*/
  static final public void def_une_valeur() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOT:
      jj_consume_token(QUOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHIFFRE:
        tdate();
        break;
      case NOM:
        label_14:
        while (true) {
          jj_consume_token(NOM);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOM:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_14;
          }
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(QUOT);
      break;
    case CHIFFRE:
      jj_consume_token(CHIFFRE);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void def_pred() throws ParseException {
    jj_consume_token(NOM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PT:
      jj_consume_token(PT);
      jj_consume_token(NOM);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    jj_consume_token(OPERATOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOM:
    case CHIFFRE:
    case QUOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOM:
        jj_consume_token(NOM);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PT:
          jj_consume_token(PT);
          jj_consume_token(NOM);
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        break;
      case CHIFFRE:
      case QUOT:
        def_une_valeur();
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_15;
      }
      jj_consume_token(AND);
      jj_consume_token(NOM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PT:
        jj_consume_token(PT);
        jj_consume_token(NOM);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      jj_consume_token(OPERATOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOM:
      case CHIFFRE:
      case QUOT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOM:
          jj_consume_token(NOM);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PT:
            jj_consume_token(PT);
            jj_consume_token(NOM);
            break;
          default:
            jj_la1[43] = jj_gen;
            ;
          }
          break;
        case CHIFFRE:
        case QUOT:
          def_une_valeur();
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
    }
  }

//AVG, SUM, MAX, COUNT, SOM
  static final public void def_aggr() throws ParseException {
    jj_consume_token(FONCT);
    jj_consume_token(OUVRANTE);
    jj_consume_token(NOM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PT:
      jj_consume_token(PT);
      jj_consume_token(NOM);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(FERMANTE);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_16;
      }
      jj_consume_token(VIRG);
      jj_consume_token(FONCT);
      jj_consume_token(OUVRANTE);
      jj_consume_token(NOM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PT:
        jj_consume_token(PT);
        jj_consume_token(NOM);
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      jj_consume_token(FERMANTE);
    }
  }

  static final public void def_attr() throws ParseException {
    jj_consume_token(NOM);
    def_dom();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_17;
      }
      jj_consume_token(VIRG);
      jj_consume_token(NOM);
      def_dom();
    }
  }

  static final public void def_dom() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATE:
      jj_consume_token(DATE);
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      jj_consume_token(OUVRANTE);
      jj_consume_token(CHIFFRE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        jj_consume_token(VIRG);
        jj_consume_token(CHIFFRE);
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      jj_consume_token(FERMANTE);
      break;
    case VARCHAR:
      jj_consume_token(VARCHAR);
      jj_consume_token(OUVRANTE);
      jj_consume_token(CHIFFRE);
      jj_consume_token(FERMANTE);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void def_lev() throws ParseException {
    label_18:
    while (true) {
      jj_consume_token(LEVEL);
      jj_consume_token(NOM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUVRANTE:
        jj_consume_token(OUVRANTE);
        jj_consume_token(NOM);
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRG:
            ;
            break;
          default:
            jj_la1[52] = jj_gen;
            break label_19;
          }
          jj_consume_token(VIRG);
          jj_consume_token(NOM);
        }
        jj_consume_token(FERMANTE);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEVEL:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_18;
      }
    }
  }

/*----------------------------------
-	TYPES 
-----------------------------------*/
  static final public void tdate() throws ParseException {
    jj_consume_token(CHIFFRE);
    jj_consume_token(SLASH);
    jj_consume_token(CHIFFRE);
    jj_consume_token(SLASH);
    jj_consume_token(CHIFFRE);
  }

  static private boolean jj_initialized_once = false;
  static public ExempleTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[55];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1760,0x22000,0x0,0x8000,0x22000,0x22000,0x0,0x0,0x0,0x3000c0,0x3000c0,0x20010000,0x0,0x20010000,0xc0,0xc0,0x22000,0x0,0x0,0x0,0x22000,0x800000,0x800000,0x80000000,0x0,0x0,0x0,0x8000,0x80000000,0x0,0x0,0x0,0x8000,0x800000,0x20000000,0x60000000,0x40000000,0x0,0x0,0x60000000,0x60000000,0x2000000,0x0,0x0,0x60000000,0x60000000,0x0,0x0,0x0,0x0,0x0,0x1c000000,0x0,0x80000000,0x4000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x8,0x8,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x0,0x0,0x0,0x0,0x4,0x8,0x4,0x0,0x0,0x4,0x8,0x4,0x0,0x0,0x0,0x0,0x10,0x4,0x4,0x10,0x10,0x0,0x4,0x4,0x10,0x10,0x4,0x8,0x4,0x8,0x8,0x0,0x8,0x0,0x0,};
   }

  public Exemple(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExempleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
  }

  public Exemple(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExempleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
  }

  public Exemple(ExempleTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
  }

  public void ReInit(ExempleTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[40];
    for (int i = 0; i < 40; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 55; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

                             }
